<mah:MetroWindow x:Class="robot_simulator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:robot_simulator"
        xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:xb="http://schemas.microsoft.com/xaml/behaviors"
        mc:Ignorable="d"
        xmlns:viewModels="clr-namespace:robot_simulator.ViewModels"
        xmlns:views="clr-namespace:robot_simulator.Views"
        xmlns:converters="clr-namespace:robot_simulator.ViewModels.ValueConterters"
        xmlns:behaviours="clr-namespace:robot_simulator.ViewModels.Behaviours"
        xmlns:Dialog="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
        d:DataContext="{d:DesignInstance viewModels:MainWindowViewModel}"
        BorderThickness="1" 
        BorderBrush="{DynamicResource MahApps.Brushes.Accent}"
        ResizeMode="CanResizeWithGrip"
        WindowTransitionsEnabled="False"
        WindowStartupLocation="CenterScreen"
        NonActiveGlowBrush="#bbd196"
        ShowIconOnTitleBar="True"
        Dialog:DialogParticipation.Register="{Binding}"
        GlowBrush="{DynamicResource MahApps.Brushes.Accent}"
        Icon="icon.png"
        Title="Front stack optimization simulator" Height="600" Width="1024">

    <Window.Resources>
        <ResourceDictionary>
            <Style x:Key="HeadingStyle"
                   BasedOn="{StaticResource MahApps.Styles.TextBlock}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="FontSize" Value="16" />
                <Setter Property="FontWeight" Value="Bold" />
            </Style>

            <Style x:Key="LargeTileStyle" TargetType="mah:Tile">
                <Setter Property="Height" Value="125" />
                <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
                <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
                <Setter Property="TitleFontSize" Value="14" />
                <Setter Property="Width" Value="300" />
            </Style>

            <Style x:Key="SmallTileStyle" TargetType="mah:Tile">
                <Setter Property="Height" Value="80" />
                <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
                <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
                <Setter Property="FontWeight" Value="Medium" />
                <Setter Property="TitleFontSize" Value="10" />
                <Setter Property="Margin" Value="0, 0, 5, 15" />
            </Style>

            <Style x:Key="SmallSectionHeader" TargetType="TextBlock">
                <Setter Property="Margin" Value="2 0 0 3" />
                <Setter Property="FontWeight" Value="Bold" />
            </Style>

            <Style x:Key="ControllerStateItemVisibility" TargetType="RichTextBox" BasedOn="{StaticResource MahApps.Styles.RichTextBox}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding SelectedOptimizer, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="0">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding SelectedOptimizer, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="1">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding SelectedOptimizer, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="2">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding SelectedOptimizer, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="3">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ControllerStateItemVisibilityForAsync" TargetType="RichTextBox" BasedOn="{StaticResource MahApps.Styles.RichTextBox}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding SelectedOptimizer, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="0">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding SelectedOptimizer, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="1">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding SelectedOptimizer, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="2">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding SelectedOptimizer, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="3">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Thickness x:Key="LeftControlMargin">5,0,0,0</Thickness>

            <converters:TileColorValueConterter x:Key="TileColorValueConterter" />
            <converters:TileEnabledValueConterter x:Key="TileEnabledValueConterter" />
            <converters:TileColorEnumValueConterter x:Key="TileColorEnumValueConterter" />
            <converters:QueueDisplayLimitConverter x:Key="QueueDisplayLimitConverter" />
            <converters:ObservableStringValueConverter x:Key="ObservableStringValueConverter" />
            <converters:NumberTimesNumberCoverter x:Key="NumberTimesNumberCoverter" />
        </ResourceDictionary>
    </Window.Resources>

    <Window.InputBindings>
        <KeyBinding Command="{Binding NextStep}" Modifiers="Ctrl" Key="N" />
        <KeyBinding Command="{Binding Undo}" Modifiers="Ctrl" Key="Z" />
    </Window.InputBindings>

    <mah:MetroWindow.Flyouts>
        <mah:FlyoutsControl>
            <mah:Flyout AutoCloseInterval="2000"
                        Position="Bottom"
                        AreAnimationsEnabled="True"
                        Header="{Binding NotificationText, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        IsOpen="{Binding IsNofiticationOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        IsAutoCloseEnabled="True"
                        >
            </mah:Flyout>
        </mah:FlyoutsControl>
    </mah:MetroWindow.Flyouts>

    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" behaviours:ScrollViewerBehavior.AutoScrollToTop="{Binding ScrollToTop, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
        <TabControl Style="{DynamicResource MahApps.Styles.TabControl.Animated}"
                    mah:TabControlHelper.UnderlinePlacement="Bottom" 
                    Margin="15 15 0 0"
                    SelectedIndex="{Binding SelectedTabIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    mah:TabControlHelper.Underlined="TabItems">
            <mah:MetroTabItem Header="Simulation">
                <StackPanel Margin="0 15 15 0" >
                <Expander Header="Settings" IsExpanded="False">
                    <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <StackPanel Orientation="Horizontal" Grid.Row="0">
                                <StackPanel Orientation="Vertical" Grid.Row="0" Grid.Column="0">
                                    <TextBlock Text="Predefined scenarios" Style="{StaticResource SmallSectionHeader}" />
                                    <StackPanel Orientation="Horizontal">
                                        <ComboBox Width="200" SelectedIndex="{Binding SelectedPredefinedScenario, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                            <ComboBoxItem Content="Scenario 1 (Half MEB)" />
                                            <ComboBoxItem Content="Scenario 2 (Mix)" />
                                            <ComboBoxItem Content="Scenario 3 (All MQB)" />
                                        </ComboBox>
                                        <Button Content="Load scenario" Margin="5 0 0 0" Command="{Binding LoadSelectedScenario}"/>
                                    </StackPanel>
                                </StackPanel>

                                <StackPanel Orientation="Vertical" Grid.Row="0" Grid.Column="1" Margin="5 0 0 0">
                                    <TextBlock Text="Optimizers" Style="{StaticResource SmallSectionHeader}" />
                                    <StackPanel Orientation="Horizontal" >
                                        <ComboBox Width="200" SelectedIndex="{Binding SelectedOptimizerComboBox, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                            <ComboBoxItem Content="Naive" />
                                            <ComboBoxItem Content="Naive with using pauses" />
                                            <ComboBoxItem Content="Async" />
                                            <ComboBoxItem Content="Async with using pauses" />
                                        </ComboBox>
                                        <Button Content="Set optimizer" Margin="5 0 0 0" Command="{Binding SetSelectedOptimizer}"/>
                                    </StackPanel>
                                </StackPanel>
                            </StackPanel>

                            <StackPanel Orientation="Vertical" Grid.Row="1" Margin="0 5 0 0">
                                <TextBlock Text="Load own scenarios" Style="{StaticResource SmallSectionHeader}" />
                                <StackPanel Orientation="Horizontal" >
                                    <Button Content="Load production queue" Margin="0 0 0 0" Command="{Binding LoadFutureProductionPlan}"/>
                                    <Button Content="Load past flow" Margin="5 0 0 0" Command="{Binding LoadProductionHistory}"/>
                                    <Button Content="Load warehouse state" Margin="5 0 0 0" Command="{Binding LoadWarehouseState}"/>
                                    <Button Content="Load scenario from folder" Margin="5 0 0 0" Command="{Binding LoadProductionState}"/>
                                </StackPanel>
                            </StackPanel>

                            <StackPanel Orientation="Horizontal" Grid.Row="2" Margin="0 5 0 0">
                                <TextBox Width="200"  Margin="0 5 0 0" Grid.Row="2" Grid.Column="0"
                                             IsReadOnly="False"
                                             mah:TextBoxHelper.UseFloatingWatermark="True"
                                             mah:TextBoxHelper.Watermark="Time for one operation cycle"
                                             ToolTip="It is an interval length between two consecutive item arrivals from past production queue"
                                             Text="{Binding ClockTime, Mode=TwoWay, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}"
                                             >
                                </TextBox>


                                <TextBox Width="200"  Margin="10 5 0 0" Grid.Row="2" Grid.Column="1"
                                             IsReadOnly="False"
                                             mah:TextBoxHelper.UseFloatingWatermark="True"
                                             mah:TextBoxHelper.Watermark="Intake to outtake cycle length"
                                             ToolTip="It is an interval length between item arrival from past production queue and outtake of item based on the production plan"
                                             Text="{Binding TimeLimit, Mode=TwoWay, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}"
                                             >
                                </TextBox>
                                <Button Content="Set time configuration" Margin="5 5 0 0" Height="auto" Command="{Binding SetIntervalLengthConfiguration}"/>
                                
                            </StackPanel>
                        </Grid>
                </Expander>

                    <Expander Header="Simulation control" IsExpanded="True">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Simulation statistics" Style="{StaticResource SmallSectionHeader}"/>
                            <StackPanel Orientation="Horizontal">
                                <RichTextBox Width="100" Margin="0 0 5 5"
                                     IsReadOnly="True"
                                     mah:TextBoxHelper.UseFloatingWatermark="True"
                                     mah:TextBoxHelper.Watermark="Current step"
                                     IsDocumentEnabled="True"
                                     >
                                    <RichTextBox.Document>
                                        <FlowDocument>
                                            <Paragraph>
                                                <Run Text="{Binding CurrentStep, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                            </Paragraph>
                                        </FlowDocument>
                                    </RichTextBox.Document>
                                </RichTextBox>

                                <RichTextBox Width="180" Margin="0 0 5 5"
                                     IsReadOnly="True"
                                     mah:TextBoxHelper.UseFloatingWatermark="True"
                                     mah:TextBoxHelper.Watermark="Number of items in production queue"
                                     IsDocumentEnabled="True"
                                     >
                                    <RichTextBox.Document>
                                        <FlowDocument>
                                            <Paragraph>
                                                <Run Text="{Binding NumberOfItemsInProductionQueue, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                            </Paragraph>
                                        </FlowDocument>
                                    </RichTextBox.Document>
                                </RichTextBox>

                                <RichTextBox Width="180" Margin="0 0 5 5"
                                     IsReadOnly="True"
                                     mah:TextBoxHelper.UseFloatingWatermark="True"
                                     mah:TextBoxHelper.Watermark="Current delay in seconds"
                                     IsDocumentEnabled="True"
                                     >
                                    <RichTextBox.Document>
                                        <FlowDocument>
                                            <Paragraph>
                                                <Run Text="{Binding CurrentDelay, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                            </Paragraph>
                                        </FlowDocument>
                                    </RichTextBox.Document>
                                </RichTextBox>

                                <RichTextBox Width="150" Margin="0 0 5 5"
                                     IsReadOnly="True"
                                     mah:TextBoxHelper.UseFloatingWatermark="True"
                                     mah:TextBoxHelper.Watermark="Current timestamp"
                                     IsDocumentEnabled="True"
                                     >
                                    <RichTextBox.Document>
                                        <FlowDocument>
                                            <Paragraph>
                                                <Run Text="{Binding RealTime, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                            </Paragraph>
                                        </FlowDocument>
                                    </RichTextBox.Document>
                                </RichTextBox>

                                <!--<RichTextBox Width="150" Margin="0 0 5 5"
                                     IsReadOnly="True"
                                     mah:TextBoxHelper.UseFloatingWatermark="True"
                                     mah:TextBoxHelper.Watermark="Time used for operations"
                                     IsDocumentEnabled="True"
                                     >
                                    <RichTextBox.Document>
                                        <FlowDocument>
                                            <Paragraph>
                                                <Run Text="{Binding TimeSpentInSimulation, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                            </Paragraph>
                                        </FlowDocument>
                                    </RichTextBox.Document>
                                </RichTextBox>-->

                                <!--<RichTextBox Width="150" Margin="0 0 5 5"
                                     IsReadOnly="True"
                                     mah:TextBoxHelper.UseFloatingWatermark="True"
                                     mah:TextBoxHelper.Watermark="Total time in simulation"
                                     IsDocumentEnabled="True"
                                     Style="{StaticResource ControllerStateItemVisibility}"
                                     >
                                    <RichTextBox.Document>
                                        <FlowDocument>
                                            <Paragraph>
                                                <Run Text="{Binding TotalSimulationTime, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                            </Paragraph>
                                        </FlowDocument>
                                    </RichTextBox.Document>
                                </RichTextBox>-->

                                <RichTextBox Width="150" Margin="0 0 5 5"
                                     IsReadOnly="True"
                                     mah:TextBoxHelper.UseFloatingWatermark="True"
                                     mah:TextBoxHelper.Watermark="Time for current step"
                                     IsDocumentEnabled="True"
                                     Style="{StaticResource ControllerStateItemVisibility}"
                                     >
                                    <RichTextBox.Document>
                                        <FlowDocument>
                                            <Paragraph>
                                                <Run Text="{Binding CurrentStepTime, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                            </Paragraph>
                                        </FlowDocument>
                                    </RichTextBox.Document>
                                </RichTextBox>

                                

                                <RichTextBox Width="200" Margin="0 0 5 5"
                                     IsReadOnly="True"
                                     mah:TextBoxHelper.UseFloatingWatermark="True"
                                     mah:TextBoxHelper.Watermark="Next item from production plan leaves at: "
                                     IsDocumentEnabled="True"
                                     Style="{StaticResource ControllerStateItemVisibilityForAsync}"
                                     >
                                    <RichTextBox.Document>
                                        <FlowDocument>
                                            <Paragraph>
                                                <Run Text="{Binding NextItemFromQueue, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                            </Paragraph>
                                        </FlowDocument>
                                    </RichTextBox.Document>
                                </RichTextBox>

                                <RichTextBox Width="150" Margin="0 0 5 5"
                                     IsReadOnly="True"
                                     mah:TextBoxHelper.UseFloatingWatermark="True"
                                     mah:TextBoxHelper.Watermark="Next item from flow arrives at:"
                                     IsDocumentEnabled="True"
                                     Style="{StaticResource ControllerStateItemVisibilityForAsync}"
                                     >
                                    <RichTextBox.Document>
                                        <FlowDocument>
                                            <Paragraph>
                                                <Run Text="{Binding NextItemFromFlow, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                            </Paragraph>
                                        </FlowDocument>
                                    </RichTextBox.Document>
                                </RichTextBox>
                            </StackPanel>

                        <mah:ToggleSwitch Margin="0 0 5 5"
                                   Header="Is simulation running ok?"
                                   OffContent="No, operation time exceeded limit"
                                   OnContent="Yes"
                                   IsEnabled="True"
                                   IsHitTestVisible="False"
                                   IsOn="{Binding ProductionStateIsOk, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                            
                            <!--Row 1-->
                            <TextBlock Text="Simulation control panel" Style="{StaticResource SmallSectionHeader}" Grid.Row="0" />
                            <StackPanel Orientation="Horizontal" Grid.Row="1" Grid.Column="0">
                                <Button Content="Next step" ToolTip="Ctlr+N" Command="{Binding NextStep}" />
                                <!--<Button Content="Undo" ToolTip="Ctlr+Z" Command="{Binding Undo}" Margin="{StaticResource LeftControlMargin}" />-->
                            </StackPanel>
                        </StackPanel>
                    </Expander>

                <TextBlock Text="Current front stack state (M13)" Grid.Row="0" Grid.Column="0" Style="{StaticResource HeadingStyle}" />
                <ItemsControl ItemsSource="{Binding CurrentWarehouseState, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <UniformGrid Rows="5" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>

                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <mah:Tile Title="{Binding PositionCode, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                           Background="{Binding StateStr, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource TileColorValueConterter}}"
                           Count="{Binding StateStr, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                           CountFontSize="15"
                           HorizontalTitleAlignment="Left"
                           IsEnabled="True"
                           Style="{StaticResource SmallTileStyle}"
                           TitleFontSize="12"
                           HorizontalContentAlignment="Center"
                           Width="Auto"
                           VerticalTitleAlignment="Top" />
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <views:QueueViewControl Grid.Column="0" Grid.Row="0" ColumnsCount="12" ControlTitle="Future production queue (Next 12 items)" DataContext="{Binding FutureQueue, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource QueueDisplayLimitConverter}, ConverterParameter=12}" />
                    <views:QueueViewControl  Grid.Column="0" Grid.Row="1" ColumnsCount="12" ControlTitle="Past production queue (Next 12 items)" DataContext="{Binding HistoryQueue, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource QueueDisplayLimitConverter}, ConverterParameter=12}" />
                </Grid>

                <Grid>
                    <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <Expander  Header="Complete future production queue" IsExpanded="False" Grid.Column="0">
                        <views:QueueViewControl ControlTitle="" ColumnsCount="6" DataContext="{Binding FutureQueue, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                    </Expander>

                    <Expander  Header="Complete past production queue" IsExpanded="False" Grid.Column="2" Margin="0, 0, 5, 0">
                        <views:QueueViewControl ControlTitle="" ColumnsCount="6" DataContext="{Binding HistoryQueue, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                    </Expander>
                </Grid>
            </StackPanel>
            </mah:MetroTabItem>

            <mah:MetroTabItem Header="Log">
                <ListBox SelectionMode="Single" ItemsSource="{Binding StepLog, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" ScrollViewer.CanContentScroll="False" ScrollViewer.VerticalScrollBarVisibility="Disabled">
                    <xb:Interaction.Behaviors>
                        <behaviours:IgnoreMouseWheelBehavior />
                    </xb:Interaction.Behaviors>
                    
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Vertical">
                                <TextBlock Text="{Binding}" />
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </mah:MetroTabItem>

            <mah:MetroTabItem Header="Batch simulation">
                <StackPanel Margin="0 15 15 0" >
                    <Expander Header="Front stack configuration" IsExpanded="True">
                        <StackPanel Orientation="Vertical">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto" />
                                    <ColumnDefinition Width="auto" />
                                    <ColumnDefinition Width="auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                    <RowDefinition Height="auto" />
                                </Grid.RowDefinitions>
                                
                                <StackPanel Orientation="Vertical" Grid.Row="0" Grid.Column="0">
                                    <TextBlock Text="Number of levels in front stack storage" Style="{StaticResource SmallSectionHeader}" />
                                    <ComboBox SelectedValue="{Binding FrontStackLevelsCount, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding FrontStackLevelCollection, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                </StackPanel>

                                <StackPanel Orientation="Vertical" Margin="15 0 0 0" Grid.Row="0" Grid.Column="1">
                                    <TextBlock Text="Number of free positions in the front stack" Style="{StaticResource SmallSectionHeader}" />
                                    <mah:NumericUpDown
                                        mah:TextBoxHelper.ClearTextButton="False"
                                        Minimum="1"
                                        Speedup="True"
                                        Value="{Binding NumberOfFreePositionsInStacker, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" />
                                </StackPanel>

                                <StackPanel Orientation="Vertical" Margin="15 0 0 0" Grid.Row="0" Grid.Column="2">
                                    <TextBlock Text="Number of items in past production queue" Style="{StaticResource SmallSectionHeader}" />
                                    <mah:NumericUpDown
                                        mah:TextBoxHelper.ClearTextButton="False"
                                        Speedup="True"
                                        Minimum="10"
                                        Value="{Binding NumberOfItemsInPastProductionQueue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" />
                                </StackPanel>

                                

                                <mah:ToggleSwitch Margin="0 8 0 0" Grid.Row="1" Grid.Column="0"
                                   Header="Select dominant production type"
                                   IsOn="{Binding IsMqbDominant, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                   OffContent="MEB"
                                   OnContent="MQB">
                                </mah:ToggleSwitch>

                                <StackPanel Orientation="Vertical" Margin="15 10 0 0 " Grid.Row="1" Grid.Column="1">
                                    <TextBlock Text="Select restriction for production queue" Style="{StaticResource SmallSectionHeader}" Margin="0 0 8 6" />
                                    <ComboBox DisplayMemberPath="Value"  SelectedIndex="{Binding RestrictionSelectedIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding ProductionQueueRestrictions, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                                    </ComboBox>
                                </StackPanel>

                                <TextBox Width="250"  Margin="0 5 0 0" Grid.Row="2" Grid.Column="0"
                                             IsReadOnly="False"
                                             mah:TextBoxHelper.UseFloatingWatermark="True"
                                             mah:TextBoxHelper.Watermark="Time for one operation cycle"
                                             ToolTip="It is an interval length between two consecutive item arrivals from past production queue"
                                             Text="{Binding ClockTime, Mode=TwoWay, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}"
                                             >
                                </TextBox>


                                <TextBox Width="250"  Margin="15 5 0 0" Grid.Row="2" Grid.Column="1"
                                             IsReadOnly="False"
                                             mah:TextBoxHelper.UseFloatingWatermark="True"
                                             mah:TextBoxHelper.Watermark="Intake to outtake cycle length"
                                             ToolTip="It is an interval length between item arrival from past production queue and outtake of item based on the production plan"
                                             Text="{Binding TimeLimit, Mode=TwoWay, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}"
                                             >
                                </TextBox>

                                <Expander Header="Parameters overview" IsExpanded="True" Grid.Row="3" Grid.ColumnSpan="4" Margin="0 10 0 0">
                                    <StackPanel Orientation="Vertical">
                                        <StackPanel Orientation="Horizontal">
                                            <TextBox Width="200" Margin="0"
                                                 IsReadOnly="True"
                                                 mah:TextBoxHelper.UseFloatingWatermark="True"
                                                 mah:TextBoxHelper.Watermark="Number of total rows in warehouse"
                                                 Text="{Binding FrontStackLevelsCount, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource NumberTimesNumberCoverter}, ConverterParameter=2}" />

                                            <TextBox Width="200" Margin="10 0 0 0"
                                                 IsReadOnly="True"
                                                 mah:TextBoxHelper.UseFloatingWatermark="True"
                                                 mah:TextBoxHelper.Watermark="Number of total columns in warehouse"
                                                 Text="{Binding FrontStackColumnsCount, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />

                                            <TextBox Width="200" Margin="10 0 0 0"
                                                 IsReadOnly="True"
                                                 mah:TextBoxHelper.UseFloatingWatermark="True"
                                                 mah:TextBoxHelper.Watermark="{Binding NumberOfDominantItemsHeader, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                                 Text="{Binding NumberOfDominantItems, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />

                                            <TextBox Width="200" Margin="10 0 0 0"
                                                 IsReadOnly="True"
                                                 mah:TextBoxHelper.UseFloatingWatermark="True"
                                                 mah:TextBoxHelper.Watermark="{Binding NumberOfNonDominantItemsHeader, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                                 Text="{Binding NumberOfNonDominantItems, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                        </StackPanel>

                                        <TextBlock Text="Example of generated sequence" Style="{StaticResource HeadingStyle}" Margin="0 0 0 8"/>
                                        <ItemsControl ItemsSource="{Binding ExampleOfGeneratedSequence, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <UniformGrid Rows="1" />
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>

                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate>
                                                    <mah:Tile Title="{Binding PositionCode, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                                       Background="{Binding StateStr, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource TileColorValueConterter}}"
                                                       Count="{Binding StateStr, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                                       CountFontSize="15"
                                                       HorizontalTitleAlignment="Left"
                                                       IsEnabled="True"
                                                       Style="{StaticResource SmallTileStyle}"
                                                       TitleFontSize="12"
                                                       HorizontalContentAlignment="Center"
                                                       Width="Auto"
                                                       VerticalTitleAlignment="Top" />
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                        </ItemsControl>
                                    </StackPanel>
                                </Expander>
                            </Grid>
                        </StackPanel>
                    </Expander>

                    <Expander Header="Simulation configuration" IsExpanded="True" Margin="0 8 0 0">
                        <StackPanel Orientation="Vertical">
                            <StackPanel Orientation="Horizontal">
                                <StackPanel Orientation="Vertical">
                                    <TextBlock Text="Number of items in each future production plan" Style="{StaticResource SmallSectionHeader}" />
                                    <mah:NumericUpDown
                                        mah:TextBoxHelper.ClearTextButton="False"
                                        Speedup="True"
                                        ToolTip="Larger number means longer simulation time!"
                                        Minimum="50"
                                        Value="{Binding NumberOfItemsInFutureProductionQueue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" />
                                </StackPanel>

                                <StackPanel Orientation="Vertical" Margin="10 0 0 0">
                                    <TextBlock Text="Number of simulations" Style="{StaticResource SmallSectionHeader}" Width="200" />
                                    <mah:NumericUpDown
                                        mah:TextBoxHelper.ClearTextButton="False"
                                        ToolTip="Larger number means longer simulation time!"
                                        Speedup="True"
                                        Minimum="1"
                                        Value="{Binding NumberOfSimulations, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" />
                                </StackPanel>

                                <CheckBox IsChecked="{Binding UseWarehouseReorganization, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="True" Content="Use warehouse reorganization?" Margin="10 20 0 0" ToolTip="Leads to longer simulation time!" />
                            </StackPanel>

                            <Expander Header="Advanced configuration" IsExpanded="False" Margin="0 10 0 0">
                                <Grid Margin="4 0 0 0">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="auto" />
                                        <RowDefinition Height="auto" />
                                    </Grid.RowDefinitions>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto" />
                                        <ColumnDefinition Width="auto" />
                                        <ColumnDefinition Width="auto" />
                                    </Grid.ColumnDefinitions>

                                    <mah:ToggleSwitch Margin="0 8 0 0" Grid.Row="0" Grid.Column="0"
                                           Header="Use fixed coeficients?"
                                           IsOn="{Binding AreCoefficientValuesFixed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                           OffContent="Coefficient values are sampled"
                                           OnContent="Coefficient values are fixed">
                                    </mah:ToggleSwitch>

                                    <mah:ToggleSwitch Margin="0 8 0 0" Grid.Row="0" Grid.Column="1"
                                           Header="Are simulations generated randomly?"
                                           IsOn="{Binding AreSimulationSequencesRandom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                           OffContent="Simulation sequences are deterministic"
                                           OnContent="Every simulation sequence is different">
                                    </mah:ToggleSwitch>

                                    <StackPanel Orientation="Horizontal" Grid.Row="1" Grid.ColumnSpan="3">
                                        <TextBox Width="250"  Margin="0 0 5 5"
                                             IsReadOnly="False"
                                             mah:TextBoxHelper.UseFloatingWatermark="True"
                                             mah:TextBoxHelper.Watermark="Probability of non-dominant item as the next one"
                                             IsEnabled="{Binding AreCoefficientValuesFixed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                             ToolTip="Future and past production queues are generated sequentially, this probability states how probable is that the next item in sequence will be non-dominant one"
                                             Text="{Binding NextNonDominantItemProbability, Mode=TwoWay, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}"
                                             >
                                        </TextBox>

                                        <TextBox Width="200" Margin="0 0 5 5"
                                             IsReadOnly="False"
                                             mah:TextBoxHelper.UseFloatingWatermark="True"
                                             mah:TextBoxHelper.Watermark="Dominant type distance weight"
                                             ToolTip="Negative weight mean that the dominant type items will be placed towards end of the warehouse, positive will place them towards the beginning"
                                             IsEnabled="{Binding AreCoefficientValuesFixed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                             Text="{Binding DominantDistanceWeight, Mode=TwoWay, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}"
                                             >
                                        </TextBox>

                                        <TextBox Width="200" Margin="0 0 5 5"
                                             IsReadOnly="False"
                                             mah:TextBoxHelper.UseFloatingWatermark="True"
                                             mah:TextBoxHelper.Watermark="Non-dominant type distance weight"
                                             ToolTip="Negative weight mean that the non-dominant type items will be placed towards end of the warehouse, positive will place them towards the beginning"
                                             IsEnabled="{Binding AreCoefficientValuesFixed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                             Text="{Binding NonDominantDistanceWeight, Mode=TwoWay, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}"
                                             >
                                        </TextBox>

                                        <TextBox Width="200" Margin="0 0 5 5"
                                             IsReadOnly="False"
                                             mah:TextBoxHelper.UseFloatingWatermark="True"
                                             mah:TextBoxHelper.Watermark="Uniform placing probability weight"
                                             ToolTip="Bigger number means more randomness will be present in the items placing in the warehouse"
                                             IsEnabled="{Binding AreCoefficientValuesFixed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                             Text="{Binding UniformProbabilityWeight, Mode=TwoWay, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}"
                                             >
                                        </TextBox>
                                    </StackPanel>
                                </Grid>
                            </Expander>

                            <StackPanel Orientation="Horizontal">
                                <Button Content="Run simulations" Command="{Binding RunSimulations}" Margin="0 10 0 0 " Width="150" />
                            </StackPanel>
                        </StackPanel>
                    </Expander>

                    <Expander Header="Simulation resuls" IsExpanded="True" Margin="0 10 0 0">
                        <StackPanel Orientation="Vertical">
                            <Expander Header="Aggregated results" IsExpanded="False">
                                <DataGrid ItemsSource="{Binding ExperimentResults.AggregatedResults, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                    AutoGenerateColumns="False"
                                    CanUserAddRows="False"
                                    CanUserDeleteRows="False"
                                    CanUserReorderColumns="True"
                                    CanUserResizeColumns="True"
                                    CanUserResizeRows="True"
                                    CanUserSortColumns="True">
                                    
                                    <xb:Interaction.Behaviors>
                                        <behaviours:IgnoreMouseWheelBehavior />
                                    </xb:Interaction.Behaviors>

                                    <DataGrid.Columns>
                                        <DataGridTextColumn IsReadOnly="True" Binding="{Binding ConfigurationName}" Header="Configuration name" />
                                        <DataGridTextColumn IsReadOnly="True" Binding="{Binding PercentageOfCompletePlans}" Header="Percentage of completed plans" />
                                        <DataGridTextColumn IsReadOnly="True" Binding="{Binding AverageMissingCars}" Header="Average number of non-produced cars" />
                                        <DataGridTextColumn IsReadOnly="True" Binding="{Binding MedianMissingCars}" Header="Median of non-produced cars" />
                                        <DataGridTextColumn IsReadOnly="True" Binding="{Binding AverageDelay}" Header="Average delay" />
                                        <DataGridTextColumn IsReadOnly="True" Binding="{Binding MedianDelay}" Header="Median delay" />
                                        <DataGridTextColumn IsReadOnly="True" Binding="{Binding MissingCars90Percentile}" Header="90th percentile of non-produced cars" />
                                    </DataGrid.Columns>
                                </DataGrid>
                            </Expander>

                            <Expander Header="Detailed results" IsExpanded="False" Margin="0 10 0 0">
                                <DataGrid ItemsSource="{Binding ExperimentResults.SimulationResults, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding SelectedSimulationResult, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                    AutoGenerateColumns="False"
                                    CanUserAddRows="False"
                                    CanUserDeleteRows="False"
                                    CanUserReorderColumns="True"
                                    CanUserResizeColumns="True"
                                    CanUserResizeRows="True"
                                    CanUserSortColumns="True">
                                    <DataGrid.ContextMenu>
                                        <ContextMenu>
                                            <MenuItem Header="Load selected item to simulation" Command="{Binding LoadSelectedSimulation}" />
                                            <MenuItem Header="Save selected item" Command="{Binding SaveSelectedSimulation}" />
                                        </ContextMenu>
                                    </DataGrid.ContextMenu>

                                    <xb:Interaction.Behaviors>
                                        <behaviours:IgnoreMouseWheelBehavior />
                                    </xb:Interaction.Behaviors>

                                    <DataGrid.Columns>
                                        <DataGridTextColumn IsReadOnly="True" Binding="{Binding SimulationNumber}" Header="#" />
                                        <DataGridTextColumn IsReadOnly="True" Binding="{Binding ConfigurationName}" Header="Configuration name" />
                                        <DataGridTextColumn IsReadOnly="True" Binding="{Binding Delay}" Header="Delay" />
                                        <DataGridTextColumn IsReadOnly="True" Binding="{Binding MissingCarsCount}" Header="Number of non-produced cars" />
                                    </DataGrid.Columns>
                                </DataGrid>
                            </Expander>
                        </StackPanel>
                        
                        
                    </Expander>
                </StackPanel>
            </mah:MetroTabItem>
        </TabControl>
    </ScrollViewer>
</mah:MetroWindow>
